#!/usr/bin/env python
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

#
# Usage: review-ui <diff cmd> <diff dir> <diff index>
#
from Tkinter import *
from os import system, kill, chdir
from signal import SIGKILL
from subprocess import Popen
from sys import argv

import string

# Button click callback
def callback(idx):
    # xxx Bring existing diffs to the front
    # xxx Pass button ref in (weakref?)
    buts[idx].config(relief=SUNKEN)
    (old, new, path) = filTuples[idx]

    lfile = old
    rfile = path
    # Diff against /dev/null
    if old == "null":
      lfile = "/dev/null"
    if new == "null":
      rfile = "/dev/null"

    if DIFFCMD == "tkdiff":
        args = [DIFFCMD, "-L"+path, lfile, rfile]
    else:
        args = [DIFFCMD, lfile, rfile]
    try:
        pids.append(Popen(args).pid)
    except OSError, ex:
        print >>sys.stderr, "Failed to execute:\n  '%s'\n%s" % \
                  (string.join(args), ex)


# Kill a the processes exec'd via button clicks
def killAll():
    try:
        for pid in pids: kill(pid, SIGKILL)
    except OSError:
        pass  # The child may have exited
    exit(0)


# Populate filTuples using the given file
def loadFile(fileName):
    def parseCSV(line, idx):
        return line.split(",")[idx].strip()

    global filTuples
    for line in file(fileName,"r"):
        old = parseCSV(line, 0)
        new = parseCSV(line, 1)
        path = parseCSV(line, 2)
        filTuples.append((old, new, path))


# Return the given string, trimming out the middle if it's long
def resizeText(path):
    global BWIDTH
    t = path
    if len(t) > BWIDTH:
        firstSeg = 20 # Show the first 20 chars
        lastSeg = BWIDTH - firstSeg - len("...")
        t = path[0:firstSeg]+"..."+path[len(t)-lastSeg:len(t)]
    return t


# filTuples contains lines of (old, new, path) tuples:
# 1. old - file name of the file containing the previous version of
#    the file, or "null" if the file does not exist (a new file).
# 2. new - file name of the file that has the new version of the
#    file, or "null" if the file does not exist (removing a file).
# 3. path - the path of the file starting from the base of the
#    source tree (eg foo/bar/baz.py).
filTuples = []
pids = []          # Children exec'd by clicking buttons
buts = []
root = Tk()
root.grid()

DIFFCMD = argv[1]
chdir(argv[2])     # Button callback opens using rel paths
loadFile(argv[3])


BWIDTH=70  # Buttons are 70 chars wide
FWRAP=50   # Wrap the file listing ever 50 files

# Create a button for each file pair
cnt = 0
for (old, new, path) in filTuples:
    # xxx Would like to capture b in the closure rather than
    # have to save in buts. Unfortunately the tkinter widgets
    # don't pass self to the callbacks.
    t = resizeText(path)
    b = Button(root, text=t, justify=LEFT, anchor=W,
               width=BWIDTH, padx=0, pady=0,
               command = lambda i=cnt: callback(i))
    b.grid(column=(cnt/FWRAP),row=(cnt%FWRAP))
    buts.append(b)
    cnt = cnt + 1

b = Button(root, text="exit", justify=CENTER,
           bg="red", fg="white",
           width=BWIDTH, padx=0, pady=0,
           activebackground="red", activeforeground="yellow",
           command=killAll)
b.grid(column=(cnt/FWRAP),row=(cnt%FWRAP))

root.grid_columnconfigure(0,weight=1)
root.mainloop()
killAll()
